const CONTRACT_ABIS = {
    patientRegistry: [
        "function getPatientId(address) view returns (string)"
    ],
    dataAccessControl: [
        "function updateDataHash(string)",
        "function getAccessiblePatients() view returns (address[])",
        "function getPatientDataHash(address) view returns (string)"
    ]
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let provider, signer, CONTRACT_ADDRESSES, PINATA_CONFIG, patientRegistry, dataAccessControl, mcToken;
let currentUserAddress = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
async function getConfig() {
    try {
        const response = await fetch('http://localhost:3000/get-config');
        const config = await response.json();

        // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –≤–∞—à–µ–º –∫–æ–¥–µ
        PINATA_CONFIG = {
            API_KEY: config.PINATA_API_KEY,
            API_SECRET: config.PINATA_API_SECRET,
            JWT: config.PINATA_JWT
        };

        CONTRACT_ADDRESSES = config.CONTRACT_ADDRESSES;
        console.log(PINATA_CONFIG, CONTRACT_ADDRESSES);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
    }
}

// –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
getConfig();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', async () => {
    await init();
    setupEventListeners();
    if (currentUserAddress) {
        await loadAccessiblePatients();
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ethers.js –∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
async function init() {
    if (window.ethereum) {
        try {
            // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MegaTestnet
            provider = new ethers.providers.Web3Provider(window.ethereum);
            await provider.send("eth_requestAccounts", []);
            signer = provider.getSigner();
            currentUserAddress = await signer.getAddress();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
            updateWalletUI();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
            patientRegistry = new ethers.Contract(
                CONTRACT_ADDRESSES.patientRegistry,
                CONTRACT_ABIS.patientRegistry,
                signer
            );
            
            dataAccessControl = new ethers.Contract(
                CONTRACT_ADDRESSES.dataAccessControl,
                CONTRACT_ABIS.dataAccessControl,
                signer
            );
            
        } catch (error) {
            console.error("Initialization error:", error);
            showError("Error connecting to wallet. Please try again.");
        }
    } else {
        showError("Please install MetaMask to use this application.");
    }
};

function updateWalletUI() {
    const connectBtn = document.getElementById('connectWallet');
    if (connectBtn) {
        connectBtn.innerHTML = `<span class="icon">üîó</span> Connected: ${shortenAddress(currentUserAddress)}`;
        connectBtn.classList.add('connected');
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
    document.getElementById('connectWallet').addEventListener('click', init);
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∑–∞–ø–∏—Å–∏
    document.getElementById('submitRecordBtn').addEventListener('click', submitMedicalRecord);
    
    // –ü–æ–∏—Å–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
    document.getElementById('patientSearch').addEventListener('input', searchPatients);
    
    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    document.querySelector('.close').addEventListener('click', () => {
        document.getElementById('patientModal').style.display = 'none';
    });
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ IPFS —á–µ—Ä–µ–∑ Pinata
async function uploadToIPFS(data) {
    try {
        const response = await fetch('https://api.pinata.cloud/pinning/pinJSONToIPFS', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${PINATA_CONFIG.JWT}`
            },
            body: JSON.stringify({
                pinataContent: data,
                pinataMetadata: {
                    name: `medical_record_${Date.now()}.json`
                }
            })
        });
        
        if (!response.ok) {
            throw new Error(`Pinata API error: ${response.status}`);
        }
        
        const result = await response.json();
        return result.IpfsHash;
        
    } catch (error) {
        console.error("Error uploading to IPFS:", error);
        throw error;
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ IPFS
async function fetchFromIPFS(ipfsHash) {
    try {
        const response = await fetch(`https://gateway.pinata.cloud/ipfs/${ipfsHash}`);
        if (!response.ok) {
            throw new Error(`Failed to fetch IPFS data: ${response.status}`);
        }
        return await response.json();
    } catch (error) {
        console.error("Error fetching from IPFS:", error);
        throw error;
    }
}

// –ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å —Ñ—É–Ω–∫—Ü–∏–µ–π getAccessiblePatients()
async function loadAccessiblePatients() {
    try {
        showLoading('patientsList', 'Loading your patients...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        if (!dataAccessControl) {
            throw new Error("Contract not initialized");
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
        const patientsList = await dataAccessControl.getAccessiblePatients();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (!patientsList || patientsList.length === 0) {
            document.getElementById('patientsList').innerHTML = `
                <div class="no-patients">
                    <img src="images/no-patients.svg" alt="No patients" class="empty-state-icon">
                    <p>No patients have shared their records with you yet.</p>
                    <p>Ask your patients to grant you access through their HealthChain portal.</p>
                </div>
            `;
            return;
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
        const patientsContainer = document.getElementById('patientsList');
        patientsContainer.innerHTML = '';
        
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
        await Promise.all(patientsList.map(async (patientAddress) => {
            try {
                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
                const patientId = await patientRegistry.getPatientId(patientAddress);
                const [name, dob] = patientId ? patientId.split('|') : ['Anonymous Patient', ''];
                
                // –°–æ–∑–¥–∞–µ–º HTML-—ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
                const patientCard = document.createElement('div');
                patientCard.className = 'patient-card';
                patientCard.dataset.address = patientAddress;
                patientCard.dataset.name = name.toLowerCase();
                patientCard.dataset.dob = dob.toLowerCase();
                
                patientCard.innerHTML = `
                    <div class="patient-avatar">${name.charAt(0).toUpperCase()}</div>
                    <div class="patient-info">
                        <h3 class="patient-name">${name}</h3>
                        <div class="patient-meta">
                            <span class="patient-dob">${dob || 'DOB not specified'}</span>
                            <span class="patient-address">${shortenAddress(patientAddress)}</span>
                        </div>
                    </div>
                    <button class="btn btn-primary view-records" 
                            data-address="${patientAddress}"
                            data-name="${name}">
                        <i class="icon medical-file"></i> View Records
                    </button>
                `;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
                patientCard.querySelector('.view-records').addEventListener('click', () => {
                    viewPatientRecords(patientAddress);
                });
                
                patientsContainer.appendChild(patientCard);
                
            } catch (error) {
                console.error(`Error processing patient ${patientAddress}:`, error);
                // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                const errorCard = document.createElement('div');
                errorCard.className = 'patient-card error';
                errorCard.innerHTML = `
                    <div class="patient-avatar">?</div>
                    <div class="patient-info">
                        <h3 class="patient-name">Unknown Patient</h3>
                        <div class="patient-meta">
                            <span class="patient-address">${shortenAddress(patientAddress)}</span>
                        </div>
                    </div>
                    <button class="btn btn-primary view-records" 
                            data-address="${patientAddress}">
                        <i class="icon medical-file"></i> View Records
                    </button>
                `;
                patientsContainer.appendChild(errorCard);
            }
        }));
        
    } catch (error) {
        console.error("Error loading accessible patients:", error);
        showError("Failed to load patient list. Please try again.");
        
        document.getElementById('patientsList').innerHTML = `
            <div class="error-state">
                <i class="icon error-icon"></i>
                <h3>Error Loading Patients</h3>
                <p>We couldn't load your patient list. Please check your connection.</p>
                <button class="btn btn-retry" onclick="loadAccessiblePatients()">
                    <i class="icon refresh"></i> Try Again
                </button>
            </div>
        `;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
function searchPatients() {
    const searchTerm = document.getElementById('patientSearch').value.toLowerCase().trim();
    const patientCards = document.querySelectorAll('.patient-card');
    
    patientCards.forEach(card => {
        const matchesSearch = 
            card.dataset.name.includes(searchTerm) ||
            card.dataset.address.includes(searchTerm) ||
            (card.dataset.dob && card.dataset.dob.includes(searchTerm));
        
        card.style.display = matchesSearch ? 'flex' : 'none';
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    const visibleCards = document.querySelectorAll('.patient-card[style*="flex"]');
    const noResults = document.getElementById('no-results-message');
    
    if (visibleCards.length === 0 && searchTerm.length > 0) {
        if (!noResults) {
            const message = document.createElement('div');
            message.id = 'no-results-message';
            message.className = 'no-results';
            message.innerHTML = `
                <i class="icon search"></i>
                <p>No patients match your search "<strong>${searchTerm}</strong>"</p>
            `;
            document.getElementById('patientsList').appendChild(message);
        }
    } else if (noResults) {
        noResults.remove();
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞
async function addPatientCard(patientAddress) {
    try {
        const patientId = await patientRegistry.getPatientId(patientAddress);
        const [name, dob] = patientId.split('|');
        
        const patientCard = document.createElement('div');
        patientCard.className = 'patient-card';
        patientCard.innerHTML = `
            <div class="patient-info">
                <div class="patient-name">${name || 'Unknown Patient'}</div>
                <div class="patient-details">
                    <span class="patient-dob">${dob || ''}</span>
                    <span class="patient-address">${shortenAddress(patientAddress)}</span>
                </div>
            </div>
            <button class="btn btn-secondary view-records-btn" data-address="${patientAddress}">
                <span class="icon">üëÅÔ∏è</span> View Records
            </button>
        `;
        
        patientCard.querySelector('.view-records-btn').addEventListener('click', (e) => {
            viewPatientRecords(e.target.getAttribute('data-address'));
        });
        
        document.getElementById('patientsList').appendChild(patientCard);
    } catch (error) {
        console.error("Error adding patient card:", error);
    }
};

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∑–∞–ø–∏—Å–∏
async function submitMedicalRecord() {
    const patientAddress = document.getElementById('patientAddress').value;
    const diagnosis = document.getElementById('diagnosis').value;
    const treatment = document.getElementById('treatment').value;
    
    if (!ethers.utils.isAddress(patientAddress)) {
        showError("Please enter a valid patient address");
        return;
    }
    
    if (!diagnosis || !treatment) {
        showError("Please fill all fields");
        return;
    }
    
    try {
        showLoading('recordsDisplay', 'Processing medical record...');
        
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø–∞—Ü–∏–µ–Ω—Ç—É –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏
        const ipfsHash = await dataAccessControl.getPatientDataHash(patientAddress);
        let records = [];
        
        if (ipfsHash && ipfsHash.length > 0) {
            records = await fetchFromIPFS(ipfsHash);
            if (!Array.isArray(records)) {
                records = [records]; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –µ—Å–ª–∏ —ç—Ç–æ –æ–¥–∏–Ω–æ—á–Ω–∞—è –∑–∞–ø–∏—Å—å
            }
        }
        
        // 2. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        const newRecord = {
            date: new Date().toLocaleDateString(),
            diagnosis,
            treatment,
            doctor: currentUserAddress,
            timestamp: Math.floor(Date.now() / 1000)
        };
        
        records.push(newRecord);
        
        // 3. –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ IPFS
        const newIpfsHash = await uploadToIPFS(records);
        
        // 4. –û–±–Ω–æ–≤–ª—è–µ–º —Ö–µ—à –≤ –±–ª–æ–∫—á–µ–π–Ω–µ (–µ—Å–ª–∏ —É –≤—Ä–∞—á–∞ –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å)
        const tx = await dataAccessControl.updateDataHash(newIpfsHash);
        await tx.wait();
        
        showSuccess("Medical record added successfully!");
        updateRecordUI(records);
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        document.getElementById('diagnosis').value = '';
        document.getElementById('treatment').value = '';
        
    } catch (error) {
        console.error("Error adding medical record:", error);
        showError(`Failed to add record: ${error.message}`);
    }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
function updateRecordUI(records) {
    const container = document.getElementById('recordsDisplay');
    container.innerHTML = '';
    
    records.slice().reverse().forEach(record => {
        const recordEl = document.createElement('div');
        recordEl.className = 'record-item';
        recordEl.innerHTML = `
            <div class="record-header">
                <span class="record-date">${record.date}</span>
                <span class="record-doctor">Dr. ${shortenAddress(record.doctor)}</span>
            </div>
            <div class="record-diagnosis"><strong>Diagnosis:</strong> ${record.diagnosis}</div>
            <div class="record-treatment"><strong>Treatment:</strong> ${record.treatment}</div>
        `;
        container.appendChild(recordEl);
    });
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π –ø–∞—Ü–∏–µ–Ω—Ç–∞
async function viewPatientRecords(patientAddress) {
    try {
        showLoading('patientRecords', 'Loading medical records...');
        
        const ipfsHash = await dataAccessControl.getPatientDataHash(patientAddress);
        
        if (!ipfsHash) {
            showInfo("No records found for this patient");
            return;
        }
        
        const data = await fetchFromIPFS(ipfsHash);
        const patientId = await patientRegistry.getPatientId(patientAddress);
        const [name] = patientId.split('|');
        
        document.getElementById('modalPatientName').textContent = `${name}'s Medical Records`;
        const container = document.getElementById('patientRecords');
        container.innerHTML = '';
        
        if (Array.isArray(data)) {
            data.slice().reverse().forEach(record => {
                const recordEl = document.createElement('div');
                recordEl.className = 'record-item';
                recordEl.innerHTML = `
                    <div class="record-header">
                        <span class="record-date">${record.date}</span>
                        <span class="record-doctor">Dr. ${shortenAddress(record.doctor)}</span>
                    </div>
                    <div class="record-diagnosis"><strong>Diagnosis:</strong> ${record.diagnosis}</div>
                    <div class="record-treatment"><strong>Treatment:</strong> ${record.treatment}</div>
                `;
                container.appendChild(recordEl);
            });
        } else {
            container.innerHTML = `<pre>${JSON.stringify(data, null, 2)}</pre>`;
        }
        
        document.getElementById('patientModal').style.display = 'block';
        
    } catch (error) {
        console.error("Error viewing patient records:", error);
        showError("Failed to load patient records");
    }
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function shortenAddress(address) {
    return address ? `${address.substring(0, 6)}...${address.substring(address.length - 4)}` : '';
}

function showLoading(elementId, message) {
    const element = document.getElementById(elementId);
    if (element) {
        element.innerHTML = `<div class="loading-spinner">${message}</div>`;
    }
}

function showSuccess(message) {
    const toast = document.createElement('div');
    toast.className = 'toast success';
    toast.textContent = message;
    document.body.appendChild(toast);
    setTimeout(() => toast.remove(), 3000);
}

function showError(message) {
    const toast = document.createElement('div');
    toast.className = 'toast error';
    toast.textContent = message;
    document.body.appendChild(toast);
    setTimeout(() => toast.remove(), 3000);
}

function showInfo(message) {
    console.log(message);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ MetaMask
if (window.ethereum) {
    window.ethereum.on('accountsChanged', (accounts) => {
        if (accounts.length === 0) {
            console.log('Please connect to MetaMask.');
        } else {
            window.location.reload();
        }
    });
}